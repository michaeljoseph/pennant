<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en-US">
<head>
<link rel="icon" href="/peps/static/hgicon.png" type="image/png" />
<meta name="robots" content="index, nofollow" />
<link rel="stylesheet" href="/peps/static/style-paper.css" type="text/css" />
<script type="text/javascript" src="/peps/static/mercurial.js"></script>

<link rel="stylesheet" href="/peps/highlightcss" type="text/css" />
<title>peps: 5b21e2a85e78 pep-0008.txt</title>
</head>
<body>

<div class="container">
<div class="menu">
<div class="logo">
<a href="http://hg.python.org">
<img src="/peps/static/hglogo.png" alt="back to hg.python.org repositories" /></a>
</div>
<ul>
<li><a href="/peps/shortlog/5b21e2a85e78">log</a></li>
<li><a href="/peps/graph/5b21e2a85e78">graph</a></li>
<li><a href="/peps/tags">tags</a></li>
<li><a href="/peps/branches">branches</a></li>
</ul>
<ul>
<li><a href="/peps/rev/5b21e2a85e78">changeset</a></li>
<li><a href="/peps/file/5b21e2a85e78/">browse</a></li>
</ul>
<ul>
<li class="active">file</li>
<li><a href="/peps/file/tip/pep-0008.txt">latest</a></li>
<li><a href="/peps/diff/5b21e2a85e78/pep-0008.txt">diff</a></li>
<li><a href="/peps/comparison/5b21e2a85e78/pep-0008.txt">comparison</a></li>
<li><a href="/peps/annotate/5b21e2a85e78/pep-0008.txt">annotate</a></li>
<li><a href="/peps/log/5b21e2a85e78/pep-0008.txt">file log</a></li>
<li><a href="/peps/raw-file/5b21e2a85e78/pep-0008.txt">raw</a></li>
</ul>
<ul>
<li><a href="/peps/help">help</a></li>
</ul>
</div>

<div class="main">
<h2 class="breadcrumb"><a href="/">Mercurial</a> &gt; <a href="/peps">peps</a> </h2>
<h3>view pep-0008.txt @ 5513:5b21e2a85e78</h3>

<form class="search" action="/peps/log">

<p><input name="rev" id="search1" type="text" size="30" /></p>
<div id="hint">Find changesets by keywords (author, files, the commit message), revision
number or hash, or <a href="/peps/help/revsets">revset expression</a>.</div>
</form>

<div class="description">Mention blog.python.org</div>

<table id="changesetEntry">
<tr>
 <th class="author">author</th>
 <td class="author">&#65;&#110;&#100;&#114;&#101;&#119;&#32;&#75;&#117;&#99;&#104;&#108;&#105;&#110;&#103;&#32;&#60;&#97;&#109;&#107;&#64;&#97;&#109;&#107;&#46;&#99;&#97;&#62;</td>
</tr>
<tr>
 <th class="date">date</th>
 <td class="date age">Fri, 01 Aug 2014 16:39:37 -0400</td>
</tr>
<tr>
 <th class="author">parents</th>
 <td class="author"><a href="/peps/file/b93d501ba313/pep-0008.txt">b93d501ba313</a> </td>
</tr>
<tr>
 <th class="author">children</th>
 <td class="author"></td>
</tr>
</table>

<div class="overflow">
<div class="sourcefirst linewraptoggle">line wrap: <a class="linewraplink" href="javascript:toggleLinewrap()">on</a></div>
<div class="sourcefirst"> line source</div>
<pre class="sourcelines stripes4 wrap">
<span id="l1">PEP: 8</span><a href="#l1"></a>
<span id="l2">Title: Style Guide for Python Code</span><a href="#l2"></a>
<span id="l3">Version: $Revision$</span><a href="#l3"></a>
<span id="l4">Last-Modified: $Date$</span><a href="#l4"></a>
<span id="l5">Author: Guido van Rossum &lt;guido@python.org&gt;,</span><a href="#l5"></a>
<span id="l6">        Barry Warsaw &lt;barry@python.org&gt;,</span><a href="#l6"></a>
<span id="l7">        Nick Coghlan &lt;ncoghlan@gmail.com&gt;</span><a href="#l7"></a>
<span id="l8">Status: Active</span><a href="#l8"></a>
<span id="l9">Type: Process</span><a href="#l9"></a>
<span id="l10">Content-Type: text/x-rst</span><a href="#l10"></a>
<span id="l11">Created: 05-Jul-2001</span><a href="#l11"></a>
<span id="l12">Post-History: 05-Jul-2001, 01-Aug-2013</span><a href="#l12"></a>
<span id="l13"></span><a href="#l13"></a>
<span id="l14"></span><a href="#l14"></a>
<span id="l15">Introduction</span><a href="#l15"></a>
<span id="l16">============</span><a href="#l16"></a>
<span id="l17"></span><a href="#l17"></a>
<span id="l18">This document gives coding conventions for the Python code comprising</span><a href="#l18"></a>
<span id="l19">the standard library in the main Python distribution.  Please see the</span><a href="#l19"></a>
<span id="l20">companion informational PEP describing style guidelines for the C code</span><a href="#l20"></a>
<span id="l21">in the C implementation of Python [1]_.</span><a href="#l21"></a>
<span id="l22"></span><a href="#l22"></a>
<span id="l23">This document and PEP 257 (Docstring Conventions) were adapted from</span><a href="#l23"></a>
<span id="l24">Guido&#39;s original Python Style Guide essay, with some additions from</span><a href="#l24"></a>
<span id="l25">Barry&#39;s style guide [2]_.</span><a href="#l25"></a>
<span id="l26"></span><a href="#l26"></a>
<span id="l27">This style guide evolves over time as additional conventions are</span><a href="#l27"></a>
<span id="l28">identified and past conventions are rendered obsolete by changes in</span><a href="#l28"></a>
<span id="l29">the language itself.</span><a href="#l29"></a>
<span id="l30"></span><a href="#l30"></a>
<span id="l31">Many projects have their own coding style guidelines. In the event of any</span><a href="#l31"></a>
<span id="l32">conflicts, such project-specific guides take precedence for that project.</span><a href="#l32"></a>
<span id="l33"></span><a href="#l33"></a>
<span id="l34"></span><a href="#l34"></a>
<span id="l35">A Foolish Consistency is the Hobgoblin of Little Minds</span><a href="#l35"></a>
<span id="l36">======================================================</span><a href="#l36"></a>
<span id="l37"></span><a href="#l37"></a>
<span id="l38">One of Guido&#39;s key insights is that code is read much more often than</span><a href="#l38"></a>
<span id="l39">it is written.  The guidelines provided here are intended to improve</span><a href="#l39"></a>
<span id="l40">the readability of code and make it consistent across the wide</span><a href="#l40"></a>
<span id="l41">spectrum of Python code.  As PEP 20 says, &quot;Readability counts&quot;.</span><a href="#l41"></a>
<span id="l42"></span><a href="#l42"></a>
<span id="l43">A style guide is about consistency.  Consistency with this style guide</span><a href="#l43"></a>
<span id="l44">is important.  Consistency within a project is more important.</span><a href="#l44"></a>
<span id="l45">Consistency within one module or function is most important.</span><a href="#l45"></a>
<span id="l46"></span><a href="#l46"></a>
<span id="l47">But most importantly: know when to be inconsistent -- sometimes the</span><a href="#l47"></a>
<span id="l48">style guide just doesn&#39;t apply.  When in doubt, use your best</span><a href="#l48"></a>
<span id="l49">judgment.  Look at other examples and decide what looks best.  And</span><a href="#l49"></a>
<span id="l50">don&#39;t hesitate to ask!</span><a href="#l50"></a>
<span id="l51"></span><a href="#l51"></a>
<span id="l52">In particular: do not break backwards compatibility just to comply with</span><a href="#l52"></a>
<span id="l53">this PEP!</span><a href="#l53"></a>
<span id="l54"></span><a href="#l54"></a>
<span id="l55">Some other good reasons to ignore a particular guideline:</span><a href="#l55"></a>
<span id="l56"></span><a href="#l56"></a>
<span id="l57">1. When applying the guideline would make the code less readable, even</span><a href="#l57"></a>
<span id="l58">   for someone who is used to reading code that follows this PEP.</span><a href="#l58"></a>
<span id="l59"></span><a href="#l59"></a>
<span id="l60">2. To be consistent with surrounding code that also breaks it (maybe</span><a href="#l60"></a>
<span id="l61">   for historic reasons) -- although this is also an opportunity to</span><a href="#l61"></a>
<span id="l62">   clean up someone else&#39;s mess (in true XP style).</span><a href="#l62"></a>
<span id="l63"></span><a href="#l63"></a>
<span id="l64">3. Because the code in question predates the introduction of the</span><a href="#l64"></a>
<span id="l65">   guideline and there is no other reason to be modifying that code.</span><a href="#l65"></a>
<span id="l66"></span><a href="#l66"></a>
<span id="l67">4. When the code needs to remain compatible with older versions of</span><a href="#l67"></a>
<span id="l68">   Python that don&#39;t support the feature recommended by the style guide.</span><a href="#l68"></a>
<span id="l69"></span><a href="#l69"></a>
<span id="l70"></span><a href="#l70"></a>
<span id="l71">Code lay-out</span><a href="#l71"></a>
<span id="l72">============</span><a href="#l72"></a>
<span id="l73"></span><a href="#l73"></a>
<span id="l74">Indentation</span><a href="#l74"></a>
<span id="l75">-----------</span><a href="#l75"></a>
<span id="l76"></span><a href="#l76"></a>
<span id="l77">Use 4 spaces per indentation level.</span><a href="#l77"></a>
<span id="l78"></span><a href="#l78"></a>
<span id="l79">Continuation lines should align wrapped elements either vertically</span><a href="#l79"></a>
<span id="l80">using Python&#39;s implicit line joining inside parentheses, brackets and</span><a href="#l80"></a>
<span id="l81">braces, or using a *hanging indent* [#fn-hi]_.  When using a hanging</span><a href="#l81"></a>
<span id="l82">indent the following considerations should be applied; there should be</span><a href="#l82"></a>
<span id="l83">no arguments on the first line and further indentation should be used</span><a href="#l83"></a>
<span id="l84">to clearly distinguish itself as a continuation line.</span><a href="#l84"></a>
<span id="l85"></span><a href="#l85"></a>
<span id="l86">Yes::</span><a href="#l86"></a>
<span id="l87"></span><a href="#l87"></a>
<span id="l88">    # Aligned with opening delimiter.</span><a href="#l88"></a>
<span id="l89">    foo = long_function_name(var_one, var_two,</span><a href="#l89"></a>
<span id="l90">                             var_three, var_four)</span><a href="#l90"></a>
<span id="l91"></span><a href="#l91"></a>
<span id="l92">    # More indentation included to distinguish this from the rest.</span><a href="#l92"></a>
<span id="l93">    def long_function_name(</span><a href="#l93"></a>
<span id="l94">            var_one, var_two, var_three,</span><a href="#l94"></a>
<span id="l95">            var_four):</span><a href="#l95"></a>
<span id="l96">        print(var_one)</span><a href="#l96"></a>
<span id="l97"></span><a href="#l97"></a>
<span id="l98">    # Hanging indents should add a level.</span><a href="#l98"></a>
<span id="l99">    foo = long_function_name(</span><a href="#l99"></a>
<span id="l100">        var_one, var_two,</span><a href="#l100"></a>
<span id="l101">        var_three, var_four)</span><a href="#l101"></a>
<span id="l102"></span><a href="#l102"></a>
<span id="l103">No::</span><a href="#l103"></a>
<span id="l104"></span><a href="#l104"></a>
<span id="l105">    # Arguments on first line forbidden when not using vertical alignment.</span><a href="#l105"></a>
<span id="l106">    foo = long_function_name(var_one, var_two,</span><a href="#l106"></a>
<span id="l107">        var_three, var_four)</span><a href="#l107"></a>
<span id="l108"></span><a href="#l108"></a>
<span id="l109">    # Further indentation required as indentation is not distinguishable.</span><a href="#l109"></a>
<span id="l110">    def long_function_name(</span><a href="#l110"></a>
<span id="l111">        var_one, var_two, var_three,</span><a href="#l111"></a>
<span id="l112">        var_four):</span><a href="#l112"></a>
<span id="l113">        print(var_one)</span><a href="#l113"></a>
<span id="l114"></span><a href="#l114"></a>
<span id="l115">The 4-space rule is optional for continuation lines.</span><a href="#l115"></a>
<span id="l116"></span><a href="#l116"></a>
<span id="l117">Optional::</span><a href="#l117"></a>
<span id="l118"></span><a href="#l118"></a>
<span id="l119">    # Hanging indents *may* be indented to other than 4 spaces.</span><a href="#l119"></a>
<span id="l120">    foo = long_function_name(</span><a href="#l120"></a>
<span id="l121">      var_one, var_two,</span><a href="#l121"></a>
<span id="l122">      var_three, var_four)</span><a href="#l122"></a>
<span id="l123"></span><a href="#l123"></a>
<span id="l124">This PEP explicitly takes no position on how or whether to further</span><a href="#l124"></a>
<span id="l125">visually distinguish continuation lines after multi-line ``if``</span><a href="#l125"></a>
<span id="l126">statements.  Some acceptable options include::</span><a href="#l126"></a>
<span id="l127"></span><a href="#l127"></a>
<span id="l128">    # No extra indentation.</span><a href="#l128"></a>
<span id="l129">    if (this</span><a href="#l129"></a>
<span id="l130">        and that):</span><a href="#l130"></a>
<span id="l131">        do_something()</span><a href="#l131"></a>
<span id="l132"></span><a href="#l132"></a>
<span id="l133">    # Add a comment, which will provide some distinction in editors</span><a href="#l133"></a>
<span id="l134">    # supporting syntax highlighting.</span><a href="#l134"></a>
<span id="l135">    if (this</span><a href="#l135"></a>
<span id="l136">        and that):</span><a href="#l136"></a>
<span id="l137">        # Since both conditions are true, we can frobnicate.</span><a href="#l137"></a>
<span id="l138">        do_something()</span><a href="#l138"></a>
<span id="l139"></span><a href="#l139"></a>
<span id="l140"></span><a href="#l140"></a>
<span id="l141">    # Add some extra indentation on the conditional continuation line.</span><a href="#l141"></a>
<span id="l142">    if (this</span><a href="#l142"></a>
<span id="l143">            and that):</span><a href="#l143"></a>
<span id="l144">        do_something()</span><a href="#l144"></a>
<span id="l145"></span><a href="#l145"></a>
<span id="l146">The closing brace/bracket/parenthesis on multi-line constructs may</span><a href="#l146"></a>
<span id="l147">either line up under the first non-whitespace character of the last</span><a href="#l147"></a>
<span id="l148">line of list, as in::</span><a href="#l148"></a>
<span id="l149"></span><a href="#l149"></a>
<span id="l150">    my_list = [</span><a href="#l150"></a>
<span id="l151">        1, 2, 3,</span><a href="#l151"></a>
<span id="l152">        4, 5, 6,</span><a href="#l152"></a>
<span id="l153">        ]</span><a href="#l153"></a>
<span id="l154">    result = some_function_that_takes_arguments(</span><a href="#l154"></a>
<span id="l155">        &#39;a&#39;, &#39;b&#39;, &#39;c&#39;,</span><a href="#l155"></a>
<span id="l156">        &#39;d&#39;, &#39;e&#39;, &#39;f&#39;,</span><a href="#l156"></a>
<span id="l157">        )</span><a href="#l157"></a>
<span id="l158"></span><a href="#l158"></a>
<span id="l159">or it may be lined up under the first character of the line that</span><a href="#l159"></a>
<span id="l160">starts the multi-line construct, as in::</span><a href="#l160"></a>
<span id="l161"></span><a href="#l161"></a>
<span id="l162">    my_list = [</span><a href="#l162"></a>
<span id="l163">        1, 2, 3,</span><a href="#l163"></a>
<span id="l164">        4, 5, 6,</span><a href="#l164"></a>
<span id="l165">    ]</span><a href="#l165"></a>
<span id="l166">    result = some_function_that_takes_arguments(</span><a href="#l166"></a>
<span id="l167">        &#39;a&#39;, &#39;b&#39;, &#39;c&#39;,</span><a href="#l167"></a>
<span id="l168">        &#39;d&#39;, &#39;e&#39;, &#39;f&#39;,</span><a href="#l168"></a>
<span id="l169">    )</span><a href="#l169"></a>
<span id="l170"></span><a href="#l170"></a>
<span id="l171"></span><a href="#l171"></a>
<span id="l172">Tabs or Spaces?</span><a href="#l172"></a>
<span id="l173">---------------</span><a href="#l173"></a>
<span id="l174"></span><a href="#l174"></a>
<span id="l175">Spaces are the preferred indentation method.</span><a href="#l175"></a>
<span id="l176"></span><a href="#l176"></a>
<span id="l177">Tabs should be used solely to remain consistent with code that is</span><a href="#l177"></a>
<span id="l178">already indented with tabs.</span><a href="#l178"></a>
<span id="l179"></span><a href="#l179"></a>
<span id="l180">Python 3 disallows mixing the use of tabs and spaces for indentation.</span><a href="#l180"></a>
<span id="l181"></span><a href="#l181"></a>
<span id="l182">Python 2 code indented with a mixture of tabs and spaces should be</span><a href="#l182"></a>
<span id="l183">converted to using spaces exclusively.</span><a href="#l183"></a>
<span id="l184"></span><a href="#l184"></a>
<span id="l185">When invoking the Python 2 command line interpreter with</span><a href="#l185"></a>
<span id="l186">the ``-t`` option, it issues warnings about code that illegally mixes</span><a href="#l186"></a>
<span id="l187">tabs and spaces.  When using ``-tt`` these warnings become errors.</span><a href="#l187"></a>
<span id="l188">These options are highly recommended!</span><a href="#l188"></a>
<span id="l189"></span><a href="#l189"></a>
<span id="l190"></span><a href="#l190"></a>
<span id="l191">Maximum Line Length</span><a href="#l191"></a>
<span id="l192">-------------------</span><a href="#l192"></a>
<span id="l193"></span><a href="#l193"></a>
<span id="l194">Limit all lines to a maximum of 79 characters.</span><a href="#l194"></a>
<span id="l195"></span><a href="#l195"></a>
<span id="l196">For flowing long blocks of text with fewer structural restrictions</span><a href="#l196"></a>
<span id="l197">(docstrings or comments), the line length should be limited to 72</span><a href="#l197"></a>
<span id="l198">characters.</span><a href="#l198"></a>
<span id="l199"></span><a href="#l199"></a>
<span id="l200">Limiting the required editor window width makes it possible to have</span><a href="#l200"></a>
<span id="l201">several files open side-by-side, and works well when using code</span><a href="#l201"></a>
<span id="l202">review tools that present the two versions in adjacent columns.</span><a href="#l202"></a>
<span id="l203"></span><a href="#l203"></a>
<span id="l204">The default wrapping in most tools disrupts the visual structure of the</span><a href="#l204"></a>
<span id="l205">code, making it more difficult to understand. The limits are chosen to</span><a href="#l205"></a>
<span id="l206">avoid wrapping in editors with the window width set to 80, even</span><a href="#l206"></a>
<span id="l207">if the tool places a marker glyph in the final column when wrapping</span><a href="#l207"></a>
<span id="l208">lines. Some web based tools may not offer dynamic line wrapping at all.</span><a href="#l208"></a>
<span id="l209"></span><a href="#l209"></a>
<span id="l210">Some teams strongly prefer a longer line length.  For code maintained</span><a href="#l210"></a>
<span id="l211">exclusively or primarily by a team that can reach agreement on this</span><a href="#l211"></a>
<span id="l212">issue, it is okay to increase the nominal line length from 80 to</span><a href="#l212"></a>
<span id="l213">100 characters (effectively increasing the maximum length to 99</span><a href="#l213"></a>
<span id="l214">characters), provided that comments and docstrings are still wrapped</span><a href="#l214"></a>
<span id="l215">at 72 characters.</span><a href="#l215"></a>
<span id="l216"></span><a href="#l216"></a>
<span id="l217">The Python standard library is conservative and requires limiting</span><a href="#l217"></a>
<span id="l218">lines to 79 characters (and docstrings/comments to 72).</span><a href="#l218"></a>
<span id="l219"></span><a href="#l219"></a>
<span id="l220">The preferred way of wrapping long lines is by using Python&#39;s implied</span><a href="#l220"></a>
<span id="l221">line continuation inside parentheses, brackets and braces.  Long lines</span><a href="#l221"></a>
<span id="l222">can be broken over multiple lines by wrapping expressions in</span><a href="#l222"></a>
<span id="l223">parentheses. These should be used in preference to using a backslash</span><a href="#l223"></a>
<span id="l224">for line continuation.</span><a href="#l224"></a>
<span id="l225"></span><a href="#l225"></a>
<span id="l226">Backslashes may still be appropriate at times.  For example, long,</span><a href="#l226"></a>
<span id="l227">multiple ``with``-statements cannot use implicit continuation, so</span><a href="#l227"></a>
<span id="l228">backslashes are acceptable::</span><a href="#l228"></a>
<span id="l229"></span><a href="#l229"></a>
<span id="l230">    with open(&#39;/path/to/some/file/you/want/to/read&#39;) as file_1, \</span><a href="#l230"></a>
<span id="l231">            open(&#39;/path/to/some/file/being/written&#39;, &#39;w&#39;) as file_2:</span><a href="#l231"></a>
<span id="l232">        file_2.write(file_1.read())</span><a href="#l232"></a>
<span id="l233"></span><a href="#l233"></a>
<span id="l234">Another such case is with ``assert`` statements.</span><a href="#l234"></a>
<span id="l235"></span><a href="#l235"></a>
<span id="l236">Make sure to indent the continued line appropriately.  The preferred</span><a href="#l236"></a>
<span id="l237">place to break around a binary operator is *after* the operator, not</span><a href="#l237"></a>
<span id="l238">before it.  Some examples::</span><a href="#l238"></a>
<span id="l239"></span><a href="#l239"></a>
<span id="l240">    class Rectangle(Blob):</span><a href="#l240"></a>
<span id="l241"></span><a href="#l241"></a>
<span id="l242">        def __init__(self, width, height,</span><a href="#l242"></a>
<span id="l243">                     color=&#39;black&#39;, emphasis=None, highlight=0):</span><a href="#l243"></a>
<span id="l244">            if (width == 0 and height == 0 and</span><a href="#l244"></a>
<span id="l245">                    color == &#39;red&#39; and emphasis == &#39;strong&#39; or</span><a href="#l245"></a>
<span id="l246">                    highlight &gt; 100):</span><a href="#l246"></a>
<span id="l247">                raise ValueError(&quot;sorry, you lose&quot;)</span><a href="#l247"></a>
<span id="l248">            if width == 0 and height == 0 and (color == &#39;red&#39; or</span><a href="#l248"></a>
<span id="l249">                                               emphasis is None):</span><a href="#l249"></a>
<span id="l250">                raise ValueError(&quot;I don&#39;t think so -- values are %s, %s&quot; %</span><a href="#l250"></a>
<span id="l251">                                 (width, height))</span><a href="#l251"></a>
<span id="l252">            Blob.__init__(self, width, height,</span><a href="#l252"></a>
<span id="l253">                          color, emphasis, highlight)</span><a href="#l253"></a>
<span id="l254"></span><a href="#l254"></a>
<span id="l255">Blank Lines</span><a href="#l255"></a>
<span id="l256">-----------</span><a href="#l256"></a>
<span id="l257"></span><a href="#l257"></a>
<span id="l258">Separate top-level function and class definitions with two blank</span><a href="#l258"></a>
<span id="l259">lines.</span><a href="#l259"></a>
<span id="l260"></span><a href="#l260"></a>
<span id="l261">Method definitions inside a class are separated by a single blank</span><a href="#l261"></a>
<span id="l262">line.</span><a href="#l262"></a>
<span id="l263"></span><a href="#l263"></a>
<span id="l264">Extra blank lines may be used (sparingly) to separate groups of</span><a href="#l264"></a>
<span id="l265">related functions.  Blank lines may be omitted between a bunch of</span><a href="#l265"></a>
<span id="l266">related one-liners (e.g. a set of dummy implementations).</span><a href="#l266"></a>
<span id="l267"></span><a href="#l267"></a>
<span id="l268">Use blank lines in functions, sparingly, to indicate logical sections.</span><a href="#l268"></a>
<span id="l269"></span><a href="#l269"></a>
<span id="l270">Python accepts the control-L (i.e. ^L) form feed character as</span><a href="#l270"></a>
<span id="l271">whitespace; Many tools treat these characters as page separators, so</span><a href="#l271"></a>
<span id="l272">you may use them to separate pages of related sections of your file.</span><a href="#l272"></a>
<span id="l273">Note, some editors and web-based code viewers may not recognize</span><a href="#l273"></a>
<span id="l274">control-L as a form feed and will show another glyph in its place.</span><a href="#l274"></a>
<span id="l275"></span><a href="#l275"></a>
<span id="l276"></span><a href="#l276"></a>
<span id="l277">Source File Encoding</span><a href="#l277"></a>
<span id="l278">--------------------</span><a href="#l278"></a>
<span id="l279"></span><a href="#l279"></a>
<span id="l280">Code in the core Python distribution should always use UTF-8 (or ASCII</span><a href="#l280"></a>
<span id="l281">in Python 2).</span><a href="#l281"></a>
<span id="l282"></span><a href="#l282"></a>
<span id="l283">Files using ASCII (in Python 2) or UTF-8 (in Python 3) should not have</span><a href="#l283"></a>
<span id="l284">an encoding declaration.</span><a href="#l284"></a>
<span id="l285"></span><a href="#l285"></a>
<span id="l286">In the standard library, non-default encodings should be used only for</span><a href="#l286"></a>
<span id="l287">test purposes or when a comment or docstring needs to mention an author</span><a href="#l287"></a>
<span id="l288">name that contains non-ASCII characters; otherwise, using ``\x``,</span><a href="#l288"></a>
<span id="l289">``\u``, ``\U``, or ``\N`` escapes is the preferred way to include</span><a href="#l289"></a>
<span id="l290">non-ASCII data in string literals.</span><a href="#l290"></a>
<span id="l291"></span><a href="#l291"></a>
<span id="l292">For Python 3.0 and beyond, the following policy is prescribed for the</span><a href="#l292"></a>
<span id="l293">standard library (see PEP 3131): All identifiers in the Python</span><a href="#l293"></a>
<span id="l294">standard library MUST use ASCII-only identifiers, and SHOULD use</span><a href="#l294"></a>
<span id="l295">English words wherever feasible (in many cases, abbreviations and</span><a href="#l295"></a>
<span id="l296">technical terms are used which aren&#39;t English). In addition, string</span><a href="#l296"></a>
<span id="l297">literals and comments must also be in ASCII. The only exceptions are</span><a href="#l297"></a>
<span id="l298">(a) test cases testing the non-ASCII features, and</span><a href="#l298"></a>
<span id="l299">(b) names of authors. Authors whose names are not based on the</span><a href="#l299"></a>
<span id="l300">latin alphabet MUST provide a latin transliteration of their</span><a href="#l300"></a>
<span id="l301">names.</span><a href="#l301"></a>
<span id="l302"></span><a href="#l302"></a>
<span id="l303">Open source projects with a global audience are encouraged to adopt a</span><a href="#l303"></a>
<span id="l304">similar policy.</span><a href="#l304"></a>
<span id="l305"></span><a href="#l305"></a>
<span id="l306"></span><a href="#l306"></a>
<span id="l307">Imports</span><a href="#l307"></a>
<span id="l308">-------</span><a href="#l308"></a>
<span id="l309"></span><a href="#l309"></a>
<span id="l310">- Imports should usually be on separate lines, e.g.::</span><a href="#l310"></a>
<span id="l311"></span><a href="#l311"></a>
<span id="l312">      Yes: import os</span><a href="#l312"></a>
<span id="l313">           import sys</span><a href="#l313"></a>
<span id="l314"></span><a href="#l314"></a>
<span id="l315">      No:  import sys, os</span><a href="#l315"></a>
<span id="l316"></span><a href="#l316"></a>
<span id="l317">  It&#39;s okay to say this though::</span><a href="#l317"></a>
<span id="l318"></span><a href="#l318"></a>
<span id="l319">      from subprocess import Popen, PIPE</span><a href="#l319"></a>
<span id="l320"></span><a href="#l320"></a>
<span id="l321">- Imports are always put at the top of the file, just after any module</span><a href="#l321"></a>
<span id="l322">  comments and docstrings, and before module globals and constants.</span><a href="#l322"></a>
<span id="l323"></span><a href="#l323"></a>
<span id="l324">  Imports should be grouped in the following order:</span><a href="#l324"></a>
<span id="l325"></span><a href="#l325"></a>
<span id="l326">  1. standard library imports</span><a href="#l326"></a>
<span id="l327">  2. related third party imports</span><a href="#l327"></a>
<span id="l328">  3. local application/library specific imports</span><a href="#l328"></a>
<span id="l329"></span><a href="#l329"></a>
<span id="l330">  You should put a blank line between each group of imports.</span><a href="#l330"></a>
<span id="l331"></span><a href="#l331"></a>
<span id="l332">  Put any relevant ``__all__`` specification after the imports.</span><a href="#l332"></a>
<span id="l333"></span><a href="#l333"></a>
<span id="l334">- Absolute imports are recommended, as they are usually more readable</span><a href="#l334"></a>
<span id="l335">  and tend to be better behaved (or at least give better error</span><a href="#l335"></a>
<span id="l336">  messages) if the import system is incorrectly configured (such as</span><a href="#l336"></a>
<span id="l337">  when a directory inside a package ends up on ``sys.path``)::</span><a href="#l337"></a>
<span id="l338"></span><a href="#l338"></a>
<span id="l339">    import mypkg.sibling</span><a href="#l339"></a>
<span id="l340">    from mypkg import sibling</span><a href="#l340"></a>
<span id="l341">    from mypkg.sibling import example</span><a href="#l341"></a>
<span id="l342"></span><a href="#l342"></a>
<span id="l343">  However, explicit relative imports are an acceptable alternative to</span><a href="#l343"></a>
<span id="l344">  absolute imports, especially when dealing with complex package layouts</span><a href="#l344"></a>
<span id="l345">  where using absolute imports would be unnecessarily verbose::</span><a href="#l345"></a>
<span id="l346"></span><a href="#l346"></a>
<span id="l347">    from . import sibling</span><a href="#l347"></a>
<span id="l348">    from .sibling import example</span><a href="#l348"></a>
<span id="l349"></span><a href="#l349"></a>
<span id="l350">  Standard library code should avoid complex package layouts and always</span><a href="#l350"></a>
<span id="l351">  use absolute imports.</span><a href="#l351"></a>
<span id="l352"></span><a href="#l352"></a>
<span id="l353">  Implicit relative imports should *never* be used and have been removed</span><a href="#l353"></a>
<span id="l354">  in Python 3.</span><a href="#l354"></a>
<span id="l355"></span><a href="#l355"></a>
<span id="l356">- When importing a class from a class-containing module, it&#39;s usually</span><a href="#l356"></a>
<span id="l357">  okay to spell this::</span><a href="#l357"></a>
<span id="l358"></span><a href="#l358"></a>
<span id="l359">      from myclass import MyClass</span><a href="#l359"></a>
<span id="l360">      from foo.bar.yourclass import YourClass</span><a href="#l360"></a>
<span id="l361"></span><a href="#l361"></a>
<span id="l362">  If this spelling causes local name clashes, then spell them ::</span><a href="#l362"></a>
<span id="l363"></span><a href="#l363"></a>
<span id="l364">      import myclass</span><a href="#l364"></a>
<span id="l365">      import foo.bar.yourclass</span><a href="#l365"></a>
<span id="l366"></span><a href="#l366"></a>
<span id="l367">  and use &quot;myclass.MyClass&quot; and &quot;foo.bar.yourclass.YourClass&quot;.</span><a href="#l367"></a>
<span id="l368"></span><a href="#l368"></a>
<span id="l369">- Wildcard imports (``from &lt;module&gt; import *``) should be avoided, as</span><a href="#l369"></a>
<span id="l370">  they make it unclear which names are present in the namespace,</span><a href="#l370"></a>
<span id="l371">  confusing both readers and many automated tools. There is one</span><a href="#l371"></a>
<span id="l372">  defensible use case for a wildcard import, which is to republish an</span><a href="#l372"></a>
<span id="l373">  internal interface as part of a public API (for example, overwriting</span><a href="#l373"></a>
<span id="l374">  a pure Python implementation of an interface with the definitions</span><a href="#l374"></a>
<span id="l375">  from an optional accelerator module and exactly which definitions</span><a href="#l375"></a>
<span id="l376">  will be overwritten isn&#39;t known in advance).</span><a href="#l376"></a>
<span id="l377"></span><a href="#l377"></a>
<span id="l378">  When republishing names this way, the guidelines below regarding</span><a href="#l378"></a>
<span id="l379">  public and internal interfaces still apply.</span><a href="#l379"></a>
<span id="l380"></span><a href="#l380"></a>
<span id="l381"></span><a href="#l381"></a>
<span id="l382">Whitespace in Expressions and Statements</span><a href="#l382"></a>
<span id="l383">========================================</span><a href="#l383"></a>
<span id="l384"></span><a href="#l384"></a>
<span id="l385">Pet Peeves</span><a href="#l385"></a>
<span id="l386">----------</span><a href="#l386"></a>
<span id="l387"></span><a href="#l387"></a>
<span id="l388">Avoid extraneous whitespace in the following situations:</span><a href="#l388"></a>
<span id="l389"></span><a href="#l389"></a>
<span id="l390">- Immediately inside parentheses, brackets or braces. ::</span><a href="#l390"></a>
<span id="l391"></span><a href="#l391"></a>
<span id="l392">      Yes: spam(ham[1], {eggs: 2})</span><a href="#l392"></a>
<span id="l393">      No:  spam( ham[ 1 ], { eggs: 2 } )</span><a href="#l393"></a>
<span id="l394"></span><a href="#l394"></a>
<span id="l395">- Immediately before a comma, semicolon, or colon::</span><a href="#l395"></a>
<span id="l396"></span><a href="#l396"></a>
<span id="l397">      Yes: if x == 4: print x, y; x, y = y, x</span><a href="#l397"></a>
<span id="l398">      No:  if x == 4 : print x , y ; x , y = y , x</span><a href="#l398"></a>
<span id="l399"></span><a href="#l399"></a>
<span id="l400">- Immediately before the open parenthesis that starts the argument</span><a href="#l400"></a>
<span id="l401">  list of a function call::</span><a href="#l401"></a>
<span id="l402"></span><a href="#l402"></a>
<span id="l403">      Yes: spam(1)</span><a href="#l403"></a>
<span id="l404">      No:  spam (1)</span><a href="#l404"></a>
<span id="l405"></span><a href="#l405"></a>
<span id="l406">- Immediately before the open parenthesis that starts an indexing or</span><a href="#l406"></a>
<span id="l407">  slicing::</span><a href="#l407"></a>
<span id="l408"></span><a href="#l408"></a>
<span id="l409">      Yes: dict[&#39;key&#39;] = list[index]</span><a href="#l409"></a>
<span id="l410">      No:  dict [&#39;key&#39;] = list [index]</span><a href="#l410"></a>
<span id="l411"></span><a href="#l411"></a>
<span id="l412">- More than one space around an assignment (or other) operator to</span><a href="#l412"></a>
<span id="l413">  align it with another.</span><a href="#l413"></a>
<span id="l414"></span><a href="#l414"></a>
<span id="l415">  Yes::</span><a href="#l415"></a>
<span id="l416"></span><a href="#l416"></a>
<span id="l417">      x = 1</span><a href="#l417"></a>
<span id="l418">      y = 2</span><a href="#l418"></a>
<span id="l419">      long_variable = 3</span><a href="#l419"></a>
<span id="l420"></span><a href="#l420"></a>
<span id="l421">  No::</span><a href="#l421"></a>
<span id="l422"></span><a href="#l422"></a>
<span id="l423">      x             = 1</span><a href="#l423"></a>
<span id="l424">      y             = 2</span><a href="#l424"></a>
<span id="l425">      long_variable = 3</span><a href="#l425"></a>
<span id="l426"></span><a href="#l426"></a>
<span id="l427"></span><a href="#l427"></a>
<span id="l428">Other Recommendations</span><a href="#l428"></a>
<span id="l429">---------------------</span><a href="#l429"></a>
<span id="l430"></span><a href="#l430"></a>
<span id="l431">- Always surround these binary operators with a single space on either</span><a href="#l431"></a>
<span id="l432">  side: assignment (``=``), augmented assignment (``+=``, ``-=``</span><a href="#l432"></a>
<span id="l433">  etc.), comparisons (``==``, ``&lt;``, ``&gt;``, ``!=``, ``&lt;&gt;``, ``&lt;=``,</span><a href="#l433"></a>
<span id="l434">  ``&gt;=``, ``in``, ``not in``, ``is``, ``is not``), Booleans (``and``,</span><a href="#l434"></a>
<span id="l435">  ``or``, ``not``).</span><a href="#l435"></a>
<span id="l436"></span><a href="#l436"></a>
<span id="l437">- If operators with different priorities are used, consider adding</span><a href="#l437"></a>
<span id="l438">  whitespace around the operators with the lowest priority(ies). Use</span><a href="#l438"></a>
<span id="l439">  your own judgment; however, never use more than one space, and</span><a href="#l439"></a>
<span id="l440">  always have the same amount of whitespace on both sides of a binary</span><a href="#l440"></a>
<span id="l441">  operator.</span><a href="#l441"></a>
<span id="l442"></span><a href="#l442"></a>
<span id="l443">  Yes::</span><a href="#l443"></a>
<span id="l444"></span><a href="#l444"></a>
<span id="l445">      i = i + 1</span><a href="#l445"></a>
<span id="l446">      submitted += 1</span><a href="#l446"></a>
<span id="l447">      x = x*2 - 1</span><a href="#l447"></a>
<span id="l448">      hypot2 = x*x + y*y</span><a href="#l448"></a>
<span id="l449">      c = (a+b) * (a-b)</span><a href="#l449"></a>
<span id="l450"></span><a href="#l450"></a>
<span id="l451">  No::</span><a href="#l451"></a>
<span id="l452"></span><a href="#l452"></a>
<span id="l453">      i=i+1</span><a href="#l453"></a>
<span id="l454">      submitted +=1</span><a href="#l454"></a>
<span id="l455">      x = x * 2 - 1</span><a href="#l455"></a>
<span id="l456">      hypot2 = x * x + y * y</span><a href="#l456"></a>
<span id="l457">      c = (a + b) * (a - b)</span><a href="#l457"></a>
<span id="l458"></span><a href="#l458"></a>
<span id="l459">- Don&#39;t use spaces around the ``=`` sign when used to indicate a</span><a href="#l459"></a>
<span id="l460">  keyword argument or a default parameter value.</span><a href="#l460"></a>
<span id="l461"></span><a href="#l461"></a>
<span id="l462">  Yes::</span><a href="#l462"></a>
<span id="l463"></span><a href="#l463"></a>
<span id="l464">      def complex(real, imag=0.0):</span><a href="#l464"></a>
<span id="l465">          return magic(r=real, i=imag)</span><a href="#l465"></a>
<span id="l466"></span><a href="#l466"></a>
<span id="l467">  No::</span><a href="#l467"></a>
<span id="l468"></span><a href="#l468"></a>
<span id="l469">      def complex(real, imag = 0.0):</span><a href="#l469"></a>
<span id="l470">          return magic(r = real, i = imag)</span><a href="#l470"></a>
<span id="l471"></span><a href="#l471"></a>
<span id="l472">- Compound statements (multiple statements on the same line) are</span><a href="#l472"></a>
<span id="l473">  generally discouraged.</span><a href="#l473"></a>
<span id="l474"></span><a href="#l474"></a>
<span id="l475">  Yes::</span><a href="#l475"></a>
<span id="l476"></span><a href="#l476"></a>
<span id="l477">      if foo == &#39;blah&#39;:</span><a href="#l477"></a>
<span id="l478">          do_blah_thing()</span><a href="#l478"></a>
<span id="l479">      do_one()</span><a href="#l479"></a>
<span id="l480">      do_two()</span><a href="#l480"></a>
<span id="l481">      do_three()</span><a href="#l481"></a>
<span id="l482"></span><a href="#l482"></a>
<span id="l483">  Rather not::</span><a href="#l483"></a>
<span id="l484"></span><a href="#l484"></a>
<span id="l485">      if foo == &#39;blah&#39;: do_blah_thing()</span><a href="#l485"></a>
<span id="l486">      do_one(); do_two(); do_three()</span><a href="#l486"></a>
<span id="l487"></span><a href="#l487"></a>
<span id="l488">- While sometimes it&#39;s okay to put an if/for/while with a small body</span><a href="#l488"></a>
<span id="l489">  on the same line, never do this for multi-clause statements.  Also</span><a href="#l489"></a>
<span id="l490">  avoid folding such long lines!</span><a href="#l490"></a>
<span id="l491"></span><a href="#l491"></a>
<span id="l492">  Rather not::</span><a href="#l492"></a>
<span id="l493"></span><a href="#l493"></a>
<span id="l494">      if foo == &#39;blah&#39;: do_blah_thing()</span><a href="#l494"></a>
<span id="l495">      for x in lst: total += x</span><a href="#l495"></a>
<span id="l496">      while t &lt; 10: t = delay()</span><a href="#l496"></a>
<span id="l497"></span><a href="#l497"></a>
<span id="l498">  Definitely not::</span><a href="#l498"></a>
<span id="l499"></span><a href="#l499"></a>
<span id="l500">      if foo == &#39;blah&#39;: do_blah_thing()</span><a href="#l500"></a>
<span id="l501">      else: do_non_blah_thing()</span><a href="#l501"></a>
<span id="l502"></span><a href="#l502"></a>
<span id="l503">      try: something()</span><a href="#l503"></a>
<span id="l504">      finally: cleanup()</span><a href="#l504"></a>
<span id="l505"></span><a href="#l505"></a>
<span id="l506">      do_one(); do_two(); do_three(long, argument,</span><a href="#l506"></a>
<span id="l507">                                   list, like, this)</span><a href="#l507"></a>
<span id="l508"></span><a href="#l508"></a>
<span id="l509">      if foo == &#39;blah&#39;: one(); two(); three()</span><a href="#l509"></a>
<span id="l510"></span><a href="#l510"></a>
<span id="l511">Comments</span><a href="#l511"></a>
<span id="l512">========</span><a href="#l512"></a>
<span id="l513"></span><a href="#l513"></a>
<span id="l514">Comments that contradict the code are worse than no comments.  Always</span><a href="#l514"></a>
<span id="l515">make a priority of keeping the comments up-to-date when the code</span><a href="#l515"></a>
<span id="l516">changes!</span><a href="#l516"></a>
<span id="l517"></span><a href="#l517"></a>
<span id="l518">Comments should be complete sentences.  If a comment is a phrase or</span><a href="#l518"></a>
<span id="l519">sentence, its first word should be capitalized, unless it is an</span><a href="#l519"></a>
<span id="l520">identifier that begins with a lower case letter (never alter the case</span><a href="#l520"></a>
<span id="l521">of identifiers!).</span><a href="#l521"></a>
<span id="l522"></span><a href="#l522"></a>
<span id="l523">If a comment is short, the period at the end can be omitted.  Block</span><a href="#l523"></a>
<span id="l524">comments generally consist of one or more paragraphs built out of</span><a href="#l524"></a>
<span id="l525">complete sentences, and each sentence should end in a period.</span><a href="#l525"></a>
<span id="l526"></span><a href="#l526"></a>
<span id="l527">You should use two spaces after a sentence-ending period.</span><a href="#l527"></a>
<span id="l528"></span><a href="#l528"></a>
<span id="l529">When writing English, follow Strunk and White.</span><a href="#l529"></a>
<span id="l530"></span><a href="#l530"></a>
<span id="l531">Python coders from non-English speaking countries: please write your</span><a href="#l531"></a>
<span id="l532">comments in English, unless you are 120% sure that the code will never</span><a href="#l532"></a>
<span id="l533">be read by people who don&#39;t speak your language.</span><a href="#l533"></a>
<span id="l534"></span><a href="#l534"></a>
<span id="l535">Block Comments</span><a href="#l535"></a>
<span id="l536">--------------</span><a href="#l536"></a>
<span id="l537"></span><a href="#l537"></a>
<span id="l538">Block comments generally apply to some (or all) code that follows</span><a href="#l538"></a>
<span id="l539">them, and are indented to the same level as that code.  Each line of a</span><a href="#l539"></a>
<span id="l540">block comment starts with a ``#`` and a single space (unless it is</span><a href="#l540"></a>
<span id="l541">indented text inside the comment).</span><a href="#l541"></a>
<span id="l542"></span><a href="#l542"></a>
<span id="l543">Paragraphs inside a block comment are separated by a line containing a</span><a href="#l543"></a>
<span id="l544">single ``#``.</span><a href="#l544"></a>
<span id="l545"></span><a href="#l545"></a>
<span id="l546">Inline Comments</span><a href="#l546"></a>
<span id="l547">---------------</span><a href="#l547"></a>
<span id="l548"></span><a href="#l548"></a>
<span id="l549">Use inline comments sparingly.</span><a href="#l549"></a>
<span id="l550"></span><a href="#l550"></a>
<span id="l551">An inline comment is a comment on the same line as a statement.</span><a href="#l551"></a>
<span id="l552">Inline comments should be separated by at least two spaces from the</span><a href="#l552"></a>
<span id="l553">statement.  They should start with a # and a single space.</span><a href="#l553"></a>
<span id="l554"></span><a href="#l554"></a>
<span id="l555">Inline comments are unnecessary and in fact distracting if they state</span><a href="#l555"></a>
<span id="l556">the obvious.  Don&#39;t do this::</span><a href="#l556"></a>
<span id="l557"></span><a href="#l557"></a>
<span id="l558">    x = x + 1                 # Increment x</span><a href="#l558"></a>
<span id="l559"></span><a href="#l559"></a>
<span id="l560">But sometimes, this is useful::</span><a href="#l560"></a>
<span id="l561"></span><a href="#l561"></a>
<span id="l562">    x = x + 1                 # Compensate for border</span><a href="#l562"></a>
<span id="l563"></span><a href="#l563"></a>
<span id="l564">Documentation Strings</span><a href="#l564"></a>
<span id="l565">---------------------</span><a href="#l565"></a>
<span id="l566"></span><a href="#l566"></a>
<span id="l567">Conventions for writing good documentation strings</span><a href="#l567"></a>
<span id="l568">(a.k.a. &quot;docstrings&quot;) are immortalized in PEP 257.</span><a href="#l568"></a>
<span id="l569"></span><a href="#l569"></a>
<span id="l570">- Write docstrings for all public modules, functions, classes, and</span><a href="#l570"></a>
<span id="l571">  methods.  Docstrings are not necessary for non-public methods, but</span><a href="#l571"></a>
<span id="l572">  you should have a comment that describes what the method does.  This</span><a href="#l572"></a>
<span id="l573">  comment should appear after the ``def`` line.</span><a href="#l573"></a>
<span id="l574"></span><a href="#l574"></a>
<span id="l575">- PEP 257 describes good docstring conventions.  Note that most</span><a href="#l575"></a>
<span id="l576">  importantly, the ``&quot;&quot;&quot;`` that ends a multiline docstring should be</span><a href="#l576"></a>
<span id="l577">  on a line by itself, e.g.::</span><a href="#l577"></a>
<span id="l578"></span><a href="#l578"></a>
<span id="l579">      &quot;&quot;&quot;Return a foobang</span><a href="#l579"></a>
<span id="l580"></span><a href="#l580"></a>
<span id="l581">      Optional plotz says to frobnicate the bizbaz first.</span><a href="#l581"></a>
<span id="l582">      &quot;&quot;&quot;</span><a href="#l582"></a>
<span id="l583"></span><a href="#l583"></a>
<span id="l584">- For one liner docstrings, please keep the closing ``&quot;&quot;&quot;`` on</span><a href="#l584"></a>
<span id="l585">  the same line.</span><a href="#l585"></a>
<span id="l586"></span><a href="#l586"></a>
<span id="l587"></span><a href="#l587"></a>
<span id="l588">Version Bookkeeping</span><a href="#l588"></a>
<span id="l589">===================</span><a href="#l589"></a>
<span id="l590"></span><a href="#l590"></a>
<span id="l591">If you have to have Subversion, CVS, or RCS crud in your source file,</span><a href="#l591"></a>
<span id="l592">do it as follows. ::</span><a href="#l592"></a>
<span id="l593"></span><a href="#l593"></a>
<span id="l594">    __version__ = &quot;$Revision$&quot;</span><a href="#l594"></a>
<span id="l595">    # $Source$</span><a href="#l595"></a>
<span id="l596"></span><a href="#l596"></a>
<span id="l597">These lines should be included after the module&#39;s docstring, before</span><a href="#l597"></a>
<span id="l598">any other code, separated by a blank line above and below.</span><a href="#l598"></a>
<span id="l599"></span><a href="#l599"></a>
<span id="l600"></span><a href="#l600"></a>
<span id="l601">Naming Conventions</span><a href="#l601"></a>
<span id="l602">==================</span><a href="#l602"></a>
<span id="l603"></span><a href="#l603"></a>
<span id="l604">The naming conventions of Python&#39;s library are a bit of a mess, so</span><a href="#l604"></a>
<span id="l605">we&#39;ll never get this completely consistent -- nevertheless, here are</span><a href="#l605"></a>
<span id="l606">the currently recommended naming standards.  New modules and packages</span><a href="#l606"></a>
<span id="l607">(including third party frameworks) should be written to these</span><a href="#l607"></a>
<span id="l608">standards, but where an existing library has a different style,</span><a href="#l608"></a>
<span id="l609">internal consistency is preferred.</span><a href="#l609"></a>
<span id="l610"></span><a href="#l610"></a>
<span id="l611">Overriding Principle</span><a href="#l611"></a>
<span id="l612">--------------------</span><a href="#l612"></a>
<span id="l613"></span><a href="#l613"></a>
<span id="l614">Names that are visible to the user as public parts of the API should</span><a href="#l614"></a>
<span id="l615">follow conventions that reflect usage rather than implementation.</span><a href="#l615"></a>
<span id="l616"></span><a href="#l616"></a>
<span id="l617">Descriptive: Naming Styles</span><a href="#l617"></a>
<span id="l618">--------------------------</span><a href="#l618"></a>
<span id="l619"></span><a href="#l619"></a>
<span id="l620">There are a lot of different naming styles.  It helps to be able to</span><a href="#l620"></a>
<span id="l621">recognize what naming style is being used, independently from what</span><a href="#l621"></a>
<span id="l622">they are used for.</span><a href="#l622"></a>
<span id="l623"></span><a href="#l623"></a>
<span id="l624">The following naming styles are commonly distinguished:</span><a href="#l624"></a>
<span id="l625"></span><a href="#l625"></a>
<span id="l626">- ``b`` (single lowercase letter)</span><a href="#l626"></a>
<span id="l627">- ``B`` (single uppercase letter)</span><a href="#l627"></a>
<span id="l628">- ``lowercase``</span><a href="#l628"></a>
<span id="l629">- ``lower_case_with_underscores``</span><a href="#l629"></a>
<span id="l630">- ``UPPERCASE``</span><a href="#l630"></a>
<span id="l631">- ``UPPER_CASE_WITH_UNDERSCORES``</span><a href="#l631"></a>
<span id="l632">- ``CapitalizedWords`` (or CapWords, or CamelCase -- so named because</span><a href="#l632"></a>
<span id="l633">  of the bumpy look of its letters [3]_).  This is also sometimes known</span><a href="#l633"></a>
<span id="l634">  as StudlyCaps.</span><a href="#l634"></a>
<span id="l635"></span><a href="#l635"></a>
<span id="l636">  Note: When using abbreviations in CapWords, capitalize all the</span><a href="#l636"></a>
<span id="l637">  letters of the abbreviation.  Thus HTTPServerError is better than</span><a href="#l637"></a>
<span id="l638">  HttpServerError.</span><a href="#l638"></a>
<span id="l639">- ``mixedCase`` (differs from CapitalizedWords by initial lowercase</span><a href="#l639"></a>
<span id="l640">  character!)</span><a href="#l640"></a>
<span id="l641">- ``Capitalized_Words_With_Underscores`` (ugly!)</span><a href="#l641"></a>
<span id="l642"></span><a href="#l642"></a>
<span id="l643">There&#39;s also the style of using a short unique prefix to group related</span><a href="#l643"></a>
<span id="l644">names together.  This is not used much in Python, but it is mentioned</span><a href="#l644"></a>
<span id="l645">for completeness.  For example, the ``os.stat()`` function returns a</span><a href="#l645"></a>
<span id="l646">tuple whose items traditionally have names like ``st_mode``,</span><a href="#l646"></a>
<span id="l647">``st_size``, ``st_mtime`` and so on.  (This is done to emphasize the</span><a href="#l647"></a>
<span id="l648">correspondence with the fields of the POSIX system call struct, which</span><a href="#l648"></a>
<span id="l649">helps programmers familiar with that.)</span><a href="#l649"></a>
<span id="l650"></span><a href="#l650"></a>
<span id="l651">The X11 library uses a leading X for all its public functions.  In</span><a href="#l651"></a>
<span id="l652">Python, this style is generally deemed unnecessary because attribute</span><a href="#l652"></a>
<span id="l653">and method names are prefixed with an object, and function names are</span><a href="#l653"></a>
<span id="l654">prefixed with a module name.</span><a href="#l654"></a>
<span id="l655"></span><a href="#l655"></a>
<span id="l656">In addition, the following special forms using leading or trailing</span><a href="#l656"></a>
<span id="l657">underscores are recognized (these can generally be combined with any</span><a href="#l657"></a>
<span id="l658">case convention):</span><a href="#l658"></a>
<span id="l659"></span><a href="#l659"></a>
<span id="l660">- ``_single_leading_underscore``: weak &quot;internal use&quot; indicator.</span><a href="#l660"></a>
<span id="l661">  E.g. ``from M import *`` does not import objects whose name starts</span><a href="#l661"></a>
<span id="l662">  with an underscore.</span><a href="#l662"></a>
<span id="l663"></span><a href="#l663"></a>
<span id="l664">- ``single_trailing_underscore_``: used by convention to avoid</span><a href="#l664"></a>
<span id="l665">  conflicts with Python keyword, e.g. ::</span><a href="#l665"></a>
<span id="l666"></span><a href="#l666"></a>
<span id="l667">      Tkinter.Toplevel(master, class_=&#39;ClassName&#39;)</span><a href="#l667"></a>
<span id="l668"></span><a href="#l668"></a>
<span id="l669">- ``__double_leading_underscore``: when naming a class attribute,</span><a href="#l669"></a>
<span id="l670">  invokes name mangling (inside class FooBar, ``__boo`` becomes</span><a href="#l670"></a>
<span id="l671">  ``_FooBar__boo``; see below).</span><a href="#l671"></a>
<span id="l672"></span><a href="#l672"></a>
<span id="l673">- ``__double_leading_and_trailing_underscore__``: &quot;magic&quot; objects or</span><a href="#l673"></a>
<span id="l674">  attributes that live in user-controlled namespaces.</span><a href="#l674"></a>
<span id="l675">  E.g. ``__init__``, ``__import__`` or ``__file__``.  Never invent</span><a href="#l675"></a>
<span id="l676">  such names; only use them as documented.</span><a href="#l676"></a>
<span id="l677"></span><a href="#l677"></a>
<span id="l678">Prescriptive: Naming Conventions</span><a href="#l678"></a>
<span id="l679">--------------------------------</span><a href="#l679"></a>
<span id="l680"></span><a href="#l680"></a>
<span id="l681">Names to Avoid</span><a href="#l681"></a>
<span id="l682">~~~~~~~~~~~~~~</span><a href="#l682"></a>
<span id="l683"></span><a href="#l683"></a>
<span id="l684">Never use the characters &#39;l&#39; (lowercase letter el), &#39;O&#39; (uppercase</span><a href="#l684"></a>
<span id="l685">letter oh), or &#39;I&#39; (uppercase letter eye) as single character variable</span><a href="#l685"></a>
<span id="l686">names.</span><a href="#l686"></a>
<span id="l687"></span><a href="#l687"></a>
<span id="l688">In some fonts, these characters are indistinguishable from the</span><a href="#l688"></a>
<span id="l689">numerals one and zero.  When tempted to use &#39;l&#39;, use &#39;L&#39; instead.</span><a href="#l689"></a>
<span id="l690"></span><a href="#l690"></a>
<span id="l691">Package and Module Names</span><a href="#l691"></a>
<span id="l692">~~~~~~~~~~~~~~~~~~~~~~~~</span><a href="#l692"></a>
<span id="l693"></span><a href="#l693"></a>
<span id="l694">Modules should have short, all-lowercase names.  Underscores can be</span><a href="#l694"></a>
<span id="l695">used in the module name if it improves readability.  Python packages</span><a href="#l695"></a>
<span id="l696">should also have short, all-lowercase names, although the use of</span><a href="#l696"></a>
<span id="l697">underscores is discouraged.</span><a href="#l697"></a>
<span id="l698"></span><a href="#l698"></a>
<span id="l699">Since module names are mapped to file names, and some file systems are</span><a href="#l699"></a>
<span id="l700">case insensitive and truncate long names, it is important that module</span><a href="#l700"></a>
<span id="l701">names be chosen to be fairly short -- this won&#39;t be a problem on Unix,</span><a href="#l701"></a>
<span id="l702">but it may be a problem when the code is transported to older Mac or</span><a href="#l702"></a>
<span id="l703">Windows versions, or DOS.</span><a href="#l703"></a>
<span id="l704"></span><a href="#l704"></a>
<span id="l705">When an extension module written in C or C++ has an accompanying</span><a href="#l705"></a>
<span id="l706">Python module that provides a higher level (e.g. more object oriented)</span><a href="#l706"></a>
<span id="l707">interface, the C/C++ module has a leading underscore</span><a href="#l707"></a>
<span id="l708">(e.g. ``_socket``).</span><a href="#l708"></a>
<span id="l709"></span><a href="#l709"></a>
<span id="l710">Class Names</span><a href="#l710"></a>
<span id="l711">~~~~~~~~~~~</span><a href="#l711"></a>
<span id="l712"></span><a href="#l712"></a>
<span id="l713">Class names should normally use the CapWords convention.</span><a href="#l713"></a>
<span id="l714"></span><a href="#l714"></a>
<span id="l715">The naming convention for functions may be used instead in cases where</span><a href="#l715"></a>
<span id="l716">the interface is documented and used primarily as a callable.</span><a href="#l716"></a>
<span id="l717"></span><a href="#l717"></a>
<span id="l718">Note that there is a separate convention for builtin names: most builtin</span><a href="#l718"></a>
<span id="l719">names are single words (or two words run together), with the CapWords</span><a href="#l719"></a>
<span id="l720">convention used only for exception names and builtin constants.</span><a href="#l720"></a>
<span id="l721"></span><a href="#l721"></a>
<span id="l722">Exception Names</span><a href="#l722"></a>
<span id="l723">~~~~~~~~~~~~~~~</span><a href="#l723"></a>
<span id="l724"></span><a href="#l724"></a>
<span id="l725">Because exceptions should be classes, the class naming convention</span><a href="#l725"></a>
<span id="l726">applies here.  However, you should use the suffix &quot;Error&quot; on your</span><a href="#l726"></a>
<span id="l727">exception names (if the exception actually is an error).</span><a href="#l727"></a>
<span id="l728"></span><a href="#l728"></a>
<span id="l729">Global Variable Names</span><a href="#l729"></a>
<span id="l730">~~~~~~~~~~~~~~~~~~~~~</span><a href="#l730"></a>
<span id="l731"></span><a href="#l731"></a>
<span id="l732">(Let&#39;s hope that these variables are meant for use inside one module</span><a href="#l732"></a>
<span id="l733">only.)  The conventions are about the same as those for functions.</span><a href="#l733"></a>
<span id="l734"></span><a href="#l734"></a>
<span id="l735">Modules that are designed for use via ``from M import *`` should use</span><a href="#l735"></a>
<span id="l736">the ``__all__`` mechanism to prevent exporting globals, or use the</span><a href="#l736"></a>
<span id="l737">older convention of prefixing such globals with an underscore (which</span><a href="#l737"></a>
<span id="l738">you might want to do to indicate these globals are &quot;module</span><a href="#l738"></a>
<span id="l739">non-public&quot;).</span><a href="#l739"></a>
<span id="l740"></span><a href="#l740"></a>
<span id="l741">Function Names</span><a href="#l741"></a>
<span id="l742">~~~~~~~~~~~~~~</span><a href="#l742"></a>
<span id="l743"></span><a href="#l743"></a>
<span id="l744">Function names should be lowercase, with words separated by</span><a href="#l744"></a>
<span id="l745">underscores as necessary to improve readability.</span><a href="#l745"></a>
<span id="l746"></span><a href="#l746"></a>
<span id="l747">mixedCase is allowed only in contexts where that&#39;s already the</span><a href="#l747"></a>
<span id="l748">prevailing style (e.g. threading.py), to retain backwards</span><a href="#l748"></a>
<span id="l749">compatibility.</span><a href="#l749"></a>
<span id="l750"></span><a href="#l750"></a>
<span id="l751">Function and method arguments</span><a href="#l751"></a>
<span id="l752">~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span><a href="#l752"></a>
<span id="l753"></span><a href="#l753"></a>
<span id="l754">Always use ``self`` for the first argument to instance methods.</span><a href="#l754"></a>
<span id="l755"></span><a href="#l755"></a>
<span id="l756">Always use ``cls`` for the first argument to class methods.</span><a href="#l756"></a>
<span id="l757"></span><a href="#l757"></a>
<span id="l758">If a function argument&#39;s name clashes with a reserved keyword, it is</span><a href="#l758"></a>
<span id="l759">generally better to append a single trailing underscore rather than</span><a href="#l759"></a>
<span id="l760">use an abbreviation or spelling corruption.  Thus ``class_`` is better</span><a href="#l760"></a>
<span id="l761">than ``clss``.  (Perhaps better is to avoid such clashes by using a</span><a href="#l761"></a>
<span id="l762">synonym.)</span><a href="#l762"></a>
<span id="l763"></span><a href="#l763"></a>
<span id="l764">Method Names and Instance Variables</span><a href="#l764"></a>
<span id="l765">~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span><a href="#l765"></a>
<span id="l766"></span><a href="#l766"></a>
<span id="l767">Use the function naming rules: lowercase with words separated by</span><a href="#l767"></a>
<span id="l768">underscores as necessary to improve readability.</span><a href="#l768"></a>
<span id="l769"></span><a href="#l769"></a>
<span id="l770">Use one leading underscore only for non-public methods and instance</span><a href="#l770"></a>
<span id="l771">variables.</span><a href="#l771"></a>
<span id="l772"></span><a href="#l772"></a>
<span id="l773">To avoid name clashes with subclasses, use two leading underscores to</span><a href="#l773"></a>
<span id="l774">invoke Python&#39;s name mangling rules.</span><a href="#l774"></a>
<span id="l775"></span><a href="#l775"></a>
<span id="l776">Python mangles these names with the class name: if class Foo has an</span><a href="#l776"></a>
<span id="l777">attribute named ``__a``, it cannot be accessed by ``Foo.__a``.  (An</span><a href="#l777"></a>
<span id="l778">insistent user could still gain access by calling ``Foo._Foo__a``.)</span><a href="#l778"></a>
<span id="l779">Generally, double leading underscores should be used only to avoid</span><a href="#l779"></a>
<span id="l780">name conflicts with attributes in classes designed to be subclassed.</span><a href="#l780"></a>
<span id="l781"></span><a href="#l781"></a>
<span id="l782">Note: there is some controversy about the use of __names (see below).</span><a href="#l782"></a>
<span id="l783"></span><a href="#l783"></a>
<span id="l784">Constants</span><a href="#l784"></a>
<span id="l785">~~~~~~~~~</span><a href="#l785"></a>
<span id="l786"></span><a href="#l786"></a>
<span id="l787">Constants are usually defined on a module level and written in all</span><a href="#l787"></a>
<span id="l788">capital letters with underscores separating words.  Examples include</span><a href="#l788"></a>
<span id="l789">``MAX_OVERFLOW`` and ``TOTAL``.</span><a href="#l789"></a>
<span id="l790"></span><a href="#l790"></a>
<span id="l791">Designing for inheritance</span><a href="#l791"></a>
<span id="l792">~~~~~~~~~~~~~~~~~~~~~~~~~</span><a href="#l792"></a>
<span id="l793"></span><a href="#l793"></a>
<span id="l794">Always decide whether a class&#39;s methods and instance variables</span><a href="#l794"></a>
<span id="l795">(collectively: &quot;attributes&quot;) should be public or non-public.  If in</span><a href="#l795"></a>
<span id="l796">doubt, choose non-public; it&#39;s easier to make it public later than to</span><a href="#l796"></a>
<span id="l797">make a public attribute non-public.</span><a href="#l797"></a>
<span id="l798"></span><a href="#l798"></a>
<span id="l799">Public attributes are those that you expect unrelated clients of your</span><a href="#l799"></a>
<span id="l800">class to use, with your commitment to avoid backward incompatible</span><a href="#l800"></a>
<span id="l801">changes.  Non-public attributes are those that are not intended to be</span><a href="#l801"></a>
<span id="l802">used by third parties; you make no guarantees that non-public</span><a href="#l802"></a>
<span id="l803">attributes won&#39;t change or even be removed.</span><a href="#l803"></a>
<span id="l804"></span><a href="#l804"></a>
<span id="l805">We don&#39;t use the term &quot;private&quot; here, since no attribute is really</span><a href="#l805"></a>
<span id="l806">private in Python (without a generally unnecessary amount of work).</span><a href="#l806"></a>
<span id="l807"></span><a href="#l807"></a>
<span id="l808">Another category of attributes are those that are part of the</span><a href="#l808"></a>
<span id="l809">&quot;subclass API&quot; (often called &quot;protected&quot; in other languages).  Some</span><a href="#l809"></a>
<span id="l810">classes are designed to be inherited from, either to extend or modify</span><a href="#l810"></a>
<span id="l811">aspects of the class&#39;s behavior.  When designing such a class, take</span><a href="#l811"></a>
<span id="l812">care to make explicit decisions about which attributes are public,</span><a href="#l812"></a>
<span id="l813">which are part of the subclass API, and which are truly only to be</span><a href="#l813"></a>
<span id="l814">used by your base class.</span><a href="#l814"></a>
<span id="l815"></span><a href="#l815"></a>
<span id="l816">With this in mind, here are the Pythonic guidelines:</span><a href="#l816"></a>
<span id="l817"></span><a href="#l817"></a>
<span id="l818">- Public attributes should have no leading underscores.</span><a href="#l818"></a>
<span id="l819"></span><a href="#l819"></a>
<span id="l820">- If your public attribute name collides with a reserved keyword,</span><a href="#l820"></a>
<span id="l821">  append a single trailing underscore to your attribute name.  This is</span><a href="#l821"></a>
<span id="l822">  preferable to an abbreviation or corrupted spelling.  (However,</span><a href="#l822"></a>
<span id="l823">  notwithstanding this rule, &#39;cls&#39; is the preferred spelling for any</span><a href="#l823"></a>
<span id="l824">  variable or argument which is known to be a class, especially the</span><a href="#l824"></a>
<span id="l825">  first argument to a class method.)</span><a href="#l825"></a>
<span id="l826"></span><a href="#l826"></a>
<span id="l827">  Note 1: See the argument name recommendation above for class methods.</span><a href="#l827"></a>
<span id="l828"></span><a href="#l828"></a>
<span id="l829">- For simple public data attributes, it is best to expose just the</span><a href="#l829"></a>
<span id="l830">  attribute name, without complicated accessor/mutator methods.  Keep</span><a href="#l830"></a>
<span id="l831">  in mind that Python provides an easy path to future enhancement,</span><a href="#l831"></a>
<span id="l832">  should you find that a simple data attribute needs to grow</span><a href="#l832"></a>
<span id="l833">  functional behavior.  In that case, use properties to hide</span><a href="#l833"></a>
<span id="l834">  functional implementation behind simple data attribute access</span><a href="#l834"></a>
<span id="l835">  syntax.</span><a href="#l835"></a>
<span id="l836"></span><a href="#l836"></a>
<span id="l837">  Note 1: Properties only work on new-style classes.</span><a href="#l837"></a>
<span id="l838"></span><a href="#l838"></a>
<span id="l839">  Note 2: Try to keep the functional behavior side-effect free,</span><a href="#l839"></a>
<span id="l840">  although side-effects such as caching are generally fine.</span><a href="#l840"></a>
<span id="l841"></span><a href="#l841"></a>
<span id="l842">  Note 3: Avoid using properties for computationally expensive</span><a href="#l842"></a>
<span id="l843">  operations; the attribute notation makes the caller believe that</span><a href="#l843"></a>
<span id="l844">  access is (relatively) cheap.</span><a href="#l844"></a>
<span id="l845"></span><a href="#l845"></a>
<span id="l846">- If your class is intended to be subclassed, and you have attributes</span><a href="#l846"></a>
<span id="l847">  that you do not want subclasses to use, consider naming them with</span><a href="#l847"></a>
<span id="l848">  double leading underscores and no trailing underscores.  This</span><a href="#l848"></a>
<span id="l849">  invokes Python&#39;s name mangling algorithm, where the name of the</span><a href="#l849"></a>
<span id="l850">  class is mangled into the attribute name.  This helps avoid</span><a href="#l850"></a>
<span id="l851">  attribute name collisions should subclasses inadvertently contain</span><a href="#l851"></a>
<span id="l852">  attributes with the same name.</span><a href="#l852"></a>
<span id="l853"></span><a href="#l853"></a>
<span id="l854">  Note 1: Note that only the simple class name is used in the mangled</span><a href="#l854"></a>
<span id="l855">  name, so if a subclass chooses both the same class name and attribute</span><a href="#l855"></a>
<span id="l856">  name, you can still get name collisions.</span><a href="#l856"></a>
<span id="l857"></span><a href="#l857"></a>
<span id="l858">  Note 2: Name mangling can make certain uses, such as debugging and</span><a href="#l858"></a>
<span id="l859">  ``__getattr__()``, less convenient.  However the name mangling</span><a href="#l859"></a>
<span id="l860">  algorithm is well documented and easy to perform manually.</span><a href="#l860"></a>
<span id="l861"></span><a href="#l861"></a>
<span id="l862">  Note 3: Not everyone likes name mangling.  Try to balance the</span><a href="#l862"></a>
<span id="l863">  need to avoid accidental name clashes with potential use by</span><a href="#l863"></a>
<span id="l864">  advanced callers.</span><a href="#l864"></a>
<span id="l865"></span><a href="#l865"></a>
<span id="l866"></span><a href="#l866"></a>
<span id="l867">Public and internal interfaces</span><a href="#l867"></a>
<span id="l868">------------------------------</span><a href="#l868"></a>
<span id="l869"></span><a href="#l869"></a>
<span id="l870">Any backwards compatibility guarantees apply only to public interfaces.</span><a href="#l870"></a>
<span id="l871">Accordingly, it is important that users be able to clearly distinguish</span><a href="#l871"></a>
<span id="l872">between public and internal interfaces.</span><a href="#l872"></a>
<span id="l873"></span><a href="#l873"></a>
<span id="l874">Documented interfaces are considered public, unless the documentation</span><a href="#l874"></a>
<span id="l875">explicitly declares them to be provisional or internal interfaces exempt</span><a href="#l875"></a>
<span id="l876">from the usual backwards compatibility guarantees. All undocumented</span><a href="#l876"></a>
<span id="l877">interfaces should be assumed to be internal.</span><a href="#l877"></a>
<span id="l878"></span><a href="#l878"></a>
<span id="l879">To better support introspection, modules should explicitly declare the</span><a href="#l879"></a>
<span id="l880">names in their public API using the ``__all__`` attribute. Setting</span><a href="#l880"></a>
<span id="l881">``__all__`` to an empty list indicates that the module has no public API.</span><a href="#l881"></a>
<span id="l882"></span><a href="#l882"></a>
<span id="l883">Even with ``__all__`` set appropriately, internal interfaces (packages,</span><a href="#l883"></a>
<span id="l884">modules, classes, functions, attributes or other names) should still be</span><a href="#l884"></a>
<span id="l885">prefixed with a single leading underscore.</span><a href="#l885"></a>
<span id="l886"></span><a href="#l886"></a>
<span id="l887">An interface is also considered internal if any containing namespace</span><a href="#l887"></a>
<span id="l888">(package, module or class) is considered internal.</span><a href="#l888"></a>
<span id="l889"></span><a href="#l889"></a>
<span id="l890">Imported names should always be considered an implementation detail.</span><a href="#l890"></a>
<span id="l891">Other modules must not rely on indirect access to such imported names</span><a href="#l891"></a>
<span id="l892">unless they are an explicitly documented part of the containing module&#39;s</span><a href="#l892"></a>
<span id="l893">API, such as ``os.path`` or a package&#39;s ``__init__`` module that exposes</span><a href="#l893"></a>
<span id="l894">functionality from submodules.</span><a href="#l894"></a>
<span id="l895"></span><a href="#l895"></a>
<span id="l896"></span><a href="#l896"></a>
<span id="l897">Programming Recommendations</span><a href="#l897"></a>
<span id="l898">===========================</span><a href="#l898"></a>
<span id="l899"></span><a href="#l899"></a>
<span id="l900">- Code should be written in a way that does not disadvantage other</span><a href="#l900"></a>
<span id="l901">  implementations of Python (PyPy, Jython, IronPython, Cython, Psyco,</span><a href="#l901"></a>
<span id="l902">  and such).</span><a href="#l902"></a>
<span id="l903"></span><a href="#l903"></a>
<span id="l904">  For example, do not rely on CPython&#39;s efficient implementation of</span><a href="#l904"></a>
<span id="l905">  in-place string concatenation for statements in the form ``a += b``</span><a href="#l905"></a>
<span id="l906">  or ``a = a + b``.  This optimization is fragile even in CPython (it</span><a href="#l906"></a>
<span id="l907">  only works for some types) and isn&#39;t present at all in implementations</span><a href="#l907"></a>
<span id="l908">  that don&#39;t use refcounting.  In performance sensitive parts of the</span><a href="#l908"></a>
<span id="l909">  library, the ``&#39;&#39;.join()`` form should be used instead.  This will</span><a href="#l909"></a>
<span id="l910">  ensure that concatenation occurs in linear time across various</span><a href="#l910"></a>
<span id="l911">  implementations.</span><a href="#l911"></a>
<span id="l912"></span><a href="#l912"></a>
<span id="l913">- Comparisons to singletons like None should always be done with</span><a href="#l913"></a>
<span id="l914">  ``is`` or ``is not``, never the equality operators.</span><a href="#l914"></a>
<span id="l915"></span><a href="#l915"></a>
<span id="l916">  Also, beware of writing ``if x`` when you really mean ``if x is not</span><a href="#l916"></a>
<span id="l917">  None`` -- e.g. when testing whether a variable or argument that</span><a href="#l917"></a>
<span id="l918">  defaults to None was set to some other value.  The other value might</span><a href="#l918"></a>
<span id="l919">  have a type (such as a container) that could be false in a boolean</span><a href="#l919"></a>
<span id="l920">  context!</span><a href="#l920"></a>
<span id="l921"></span><a href="#l921"></a>
<span id="l922">- Use ``is not`` operator rather than ``not ... is``.  While both</span><a href="#l922"></a>
<span id="l923">  expressions are functionally identical, the former is more readable</span><a href="#l923"></a>
<span id="l924">  and preferred.</span><a href="#l924"></a>
<span id="l925">  </span><a href="#l925"></a>
<span id="l926">  Yes::</span><a href="#l926"></a>
<span id="l927">  </span><a href="#l927"></a>
<span id="l928">      if foo is not None:</span><a href="#l928"></a>
<span id="l929">      </span><a href="#l929"></a>
<span id="l930">  No::</span><a href="#l930"></a>
<span id="l931">  </span><a href="#l931"></a>
<span id="l932">      if not foo is None:</span><a href="#l932"></a>
<span id="l933"></span><a href="#l933"></a>
<span id="l934">- When implementing ordering operations with rich comparisons, it is</span><a href="#l934"></a>
<span id="l935">  best to implement all six operations (``__eq__``, ``__ne__``,</span><a href="#l935"></a>
<span id="l936">  ``__lt__``, ``__le__``, ``__gt__``, ``__ge__``) rather than relying</span><a href="#l936"></a>
<span id="l937">  on other code to only exercise a particular comparison.</span><a href="#l937"></a>
<span id="l938"></span><a href="#l938"></a>
<span id="l939">  To minimize the effort involved, the ``functools.total_ordering()``</span><a href="#l939"></a>
<span id="l940">  decorator provides a tool to generate missing comparison methods.</span><a href="#l940"></a>
<span id="l941"></span><a href="#l941"></a>
<span id="l942">  PEP 207 indicates that reflexivity rules *are* assumed by Python.</span><a href="#l942"></a>
<span id="l943">  Thus, the interpreter may swap ``y &gt; x`` with ``x &lt; y``, ``y &gt;= x``</span><a href="#l943"></a>
<span id="l944">  with ``x &lt;= y``, and may swap the arguments of ``x == y`` and ``x !=</span><a href="#l944"></a>
<span id="l945">  y``.  The ``sort()`` and ``min()`` operations are guaranteed to use</span><a href="#l945"></a>
<span id="l946">  the ``&lt;`` operator and the ``max()`` function uses the ``&gt;``</span><a href="#l946"></a>
<span id="l947">  operator.  However, it is best to implement all six operations so</span><a href="#l947"></a>
<span id="l948">  that confusion doesn&#39;t arise in other contexts.</span><a href="#l948"></a>
<span id="l949"></span><a href="#l949"></a>
<span id="l950">- Always use a def statement instead of an assignment statement that binds</span><a href="#l950"></a>
<span id="l951">  a lambda expression directly to a name.</span><a href="#l951"></a>
<span id="l952"></span><a href="#l952"></a>
<span id="l953">  Yes::</span><a href="#l953"></a>
<span id="l954"></span><a href="#l954"></a>
<span id="l955">      def f(x): return 2*x</span><a href="#l955"></a>
<span id="l956"></span><a href="#l956"></a>
<span id="l957">  No::</span><a href="#l957"></a>
<span id="l958"></span><a href="#l958"></a>
<span id="l959">      f = lambda x: 2*x</span><a href="#l959"></a>
<span id="l960"></span><a href="#l960"></a>
<span id="l961">  The first form means that the name of the resulting function object is</span><a href="#l961"></a>
<span id="l962">  specifically &#39;f&#39; instead of the generic &#39;&lt;lambda&gt;&#39;. This is more</span><a href="#l962"></a>
<span id="l963">  useful for tracebacks and string representations in general. The use</span><a href="#l963"></a>
<span id="l964">  of the assignment statement eliminates the sole benefit a lambda</span><a href="#l964"></a>
<span id="l965">  expression can offer over an explicit def statement (i.e. that it can</span><a href="#l965"></a>
<span id="l966">  be embedded inside a larger expression)</span><a href="#l966"></a>
<span id="l967"></span><a href="#l967"></a>
<span id="l968">- Derive exceptions from ``Exception`` rather than ``BaseException``.</span><a href="#l968"></a>
<span id="l969">  Direct inheritance from ``BaseException`` is reserved for exceptions</span><a href="#l969"></a>
<span id="l970">  where catching them is almost always the wrong thing to do.</span><a href="#l970"></a>
<span id="l971"></span><a href="#l971"></a>
<span id="l972">  Design exception hierarchies based on the distinctions that code</span><a href="#l972"></a>
<span id="l973">  *catching* the exceptions is likely to need, rather than the locations</span><a href="#l973"></a>
<span id="l974">  where the exceptions are raised. Aim to answer the question</span><a href="#l974"></a>
<span id="l975">  &quot;What went wrong?&quot; programmatically, rather than only stating that</span><a href="#l975"></a>
<span id="l976">  &quot;A problem occurred&quot; (see PEP 3151 for an example of this lesson being</span><a href="#l976"></a>
<span id="l977">  learned for the builtin exception hierarchy)</span><a href="#l977"></a>
<span id="l978"></span><a href="#l978"></a>
<span id="l979">  Class naming conventions apply here, although you should add the</span><a href="#l979"></a>
<span id="l980">  suffix &quot;Error&quot; to your exception classes if the exception is an</span><a href="#l980"></a>
<span id="l981">  error.  Non-error exceptions that are used for non-local flow control</span><a href="#l981"></a>
<span id="l982">  or other forms of signaling need no special suffix.</span><a href="#l982"></a>
<span id="l983"></span><a href="#l983"></a>
<span id="l984">- Use exception chaining appropriately. In Python 3, &quot;raise X from Y&quot;</span><a href="#l984"></a>
<span id="l985">  should be used to indicate explicit replacement without losing the</span><a href="#l985"></a>
<span id="l986">  original traceback.</span><a href="#l986"></a>
<span id="l987"></span><a href="#l987"></a>
<span id="l988">  When deliberately replacing an inner exception (using &quot;raise X&quot; in</span><a href="#l988"></a>
<span id="l989">  Python 2 or &quot;raise X from None&quot; in Python 3.3+), ensure that relevant</span><a href="#l989"></a>
<span id="l990">  details are transferred to the new exception (such as preserving the</span><a href="#l990"></a>
<span id="l991">  attribute name when converting KeyError to AttributeError, or</span><a href="#l991"></a>
<span id="l992">  embedding the text of the original exception in the new exception</span><a href="#l992"></a>
<span id="l993">  message).</span><a href="#l993"></a>
<span id="l994"></span><a href="#l994"></a>
<span id="l995">- When raising an exception in Python 2, use ``raise ValueError(&#39;message&#39;)``</span><a href="#l995"></a>
<span id="l996">  instead of the older form ``raise ValueError, &#39;message&#39;``.</span><a href="#l996"></a>
<span id="l997"></span><a href="#l997"></a>
<span id="l998">  The latter form is not legal Python 3 syntax.</span><a href="#l998"></a>
<span id="l999"></span><a href="#l999"></a>
<span id="l1000">  The paren-using form also means that when the exception arguments are</span><a href="#l1000"></a>
<span id="l1001">  long or include string formatting, you don&#39;t need to use line</span><a href="#l1001"></a>
<span id="l1002">  continuation characters thanks to the containing parentheses.</span><a href="#l1002"></a>
<span id="l1003"></span><a href="#l1003"></a>
<span id="l1004">- When catching exceptions, mention specific exceptions whenever</span><a href="#l1004"></a>
<span id="l1005">  possible instead of using a bare ``except:`` clause.</span><a href="#l1005"></a>
<span id="l1006"></span><a href="#l1006"></a>
<span id="l1007">  For example, use::</span><a href="#l1007"></a>
<span id="l1008"></span><a href="#l1008"></a>
<span id="l1009">      try:</span><a href="#l1009"></a>
<span id="l1010">          import platform_specific_module</span><a href="#l1010"></a>
<span id="l1011">      except ImportError:</span><a href="#l1011"></a>
<span id="l1012">          platform_specific_module = None</span><a href="#l1012"></a>
<span id="l1013"></span><a href="#l1013"></a>
<span id="l1014">  A bare ``except:`` clause will catch SystemExit and</span><a href="#l1014"></a>
<span id="l1015">  KeyboardInterrupt exceptions, making it harder to interrupt a</span><a href="#l1015"></a>
<span id="l1016">  program with Control-C, and can disguise other problems.  If you</span><a href="#l1016"></a>
<span id="l1017">  want to catch all exceptions that signal program errors, use</span><a href="#l1017"></a>
<span id="l1018">  ``except Exception:`` (bare except is equivalent to ``except</span><a href="#l1018"></a>
<span id="l1019">  BaseException:``).</span><a href="#l1019"></a>
<span id="l1020"></span><a href="#l1020"></a>
<span id="l1021">  A good rule of thumb is to limit use of bare &#39;except&#39; clauses to two</span><a href="#l1021"></a>
<span id="l1022">  cases:</span><a href="#l1022"></a>
<span id="l1023"></span><a href="#l1023"></a>
<span id="l1024">  1. If the exception handler will be printing out or logging the</span><a href="#l1024"></a>
<span id="l1025">     traceback; at least the user will be aware that an error has</span><a href="#l1025"></a>
<span id="l1026">     occurred.</span><a href="#l1026"></a>
<span id="l1027"></span><a href="#l1027"></a>
<span id="l1028">  2. If the code needs to do some cleanup work, but then lets the</span><a href="#l1028"></a>
<span id="l1029">     exception propagate upwards with ``raise``.  ``try...finally``</span><a href="#l1029"></a>
<span id="l1030">     can be a better way to handle this case.</span><a href="#l1030"></a>
<span id="l1031"></span><a href="#l1031"></a>
<span id="l1032">- When binding caught exceptions to a name, prefer the explicit name</span><a href="#l1032"></a>
<span id="l1033">  binding syntax added in Python 2.6::</span><a href="#l1033"></a>
<span id="l1034"></span><a href="#l1034"></a>
<span id="l1035">      try:</span><a href="#l1035"></a>
<span id="l1036">          process_data()</span><a href="#l1036"></a>
<span id="l1037">      except Exception as exc:</span><a href="#l1037"></a>
<span id="l1038">          raise DataProcessingFailedError(str(exc))</span><a href="#l1038"></a>
<span id="l1039"></span><a href="#l1039"></a>
<span id="l1040">  This is the only syntax supported in Python 3, and avoids the</span><a href="#l1040"></a>
<span id="l1041">  ambiguity problems associated with the older comma-based syntax.</span><a href="#l1041"></a>
<span id="l1042"></span><a href="#l1042"></a>
<span id="l1043">- When catching operating system errors, prefer the explicit exception</span><a href="#l1043"></a>
<span id="l1044">  hierarchy introduced in Python 3.3 over introspection of ``errno``</span><a href="#l1044"></a>
<span id="l1045">  values.</span><a href="#l1045"></a>
<span id="l1046"></span><a href="#l1046"></a>
<span id="l1047">- Additionally, for all try/except clauses, limit the ``try`` clause</span><a href="#l1047"></a>
<span id="l1048">  to the absolute minimum amount of code necessary.  Again, this</span><a href="#l1048"></a>
<span id="l1049">  avoids masking bugs.</span><a href="#l1049"></a>
<span id="l1050"></span><a href="#l1050"></a>
<span id="l1051">  Yes::</span><a href="#l1051"></a>
<span id="l1052"></span><a href="#l1052"></a>
<span id="l1053">      try:</span><a href="#l1053"></a>
<span id="l1054">          value = collection[key]</span><a href="#l1054"></a>
<span id="l1055">      except KeyError:</span><a href="#l1055"></a>
<span id="l1056">          return key_not_found(key)</span><a href="#l1056"></a>
<span id="l1057">      else:</span><a href="#l1057"></a>
<span id="l1058">          return handle_value(value)</span><a href="#l1058"></a>
<span id="l1059"></span><a href="#l1059"></a>
<span id="l1060">  No::</span><a href="#l1060"></a>
<span id="l1061"></span><a href="#l1061"></a>
<span id="l1062">      try:</span><a href="#l1062"></a>
<span id="l1063">          # Too broad!</span><a href="#l1063"></a>
<span id="l1064">          return handle_value(collection[key])</span><a href="#l1064"></a>
<span id="l1065">      except KeyError:</span><a href="#l1065"></a>
<span id="l1066">          # Will also catch KeyError raised by handle_value()</span><a href="#l1066"></a>
<span id="l1067">          return key_not_found(key)</span><a href="#l1067"></a>
<span id="l1068"></span><a href="#l1068"></a>
<span id="l1069">- When a resource is local to a particular section of code, use a</span><a href="#l1069"></a>
<span id="l1070">  ``with`` statement to ensure it is cleaned up promptly and reliably</span><a href="#l1070"></a>
<span id="l1071">  after use. A try/finally statement is also acceptable.</span><a href="#l1071"></a>
<span id="l1072"></span><a href="#l1072"></a>
<span id="l1073">- Context managers should be invoked through separate functions or methods</span><a href="#l1073"></a>
<span id="l1074">  whenever they do something other than acquire and release resources.</span><a href="#l1074"></a>
<span id="l1075">  For example:</span><a href="#l1075"></a>
<span id="l1076"></span><a href="#l1076"></a>
<span id="l1077">  Yes::</span><a href="#l1077"></a>
<span id="l1078"></span><a href="#l1078"></a>
<span id="l1079">               with conn.begin_transaction():</span><a href="#l1079"></a>
<span id="l1080">                   do_stuff_in_transaction(conn)</span><a href="#l1080"></a>
<span id="l1081"></span><a href="#l1081"></a>
<span id="l1082">  No::</span><a href="#l1082"></a>
<span id="l1083"></span><a href="#l1083"></a>
<span id="l1084">               with conn:</span><a href="#l1084"></a>
<span id="l1085">                   do_stuff_in_transaction(conn)</span><a href="#l1085"></a>
<span id="l1086"></span><a href="#l1086"></a>
<span id="l1087">  The latter example doesn&#39;t provide any information to indicate that</span><a href="#l1087"></a>
<span id="l1088">  the __enter__ and __exit__ methods are doing something other than</span><a href="#l1088"></a>
<span id="l1089">  closing the connection after a transaction.  Being explicit is</span><a href="#l1089"></a>
<span id="l1090">  important in this case.</span><a href="#l1090"></a>
<span id="l1091"></span><a href="#l1091"></a>
<span id="l1092">- Use string methods instead of the string module.</span><a href="#l1092"></a>
<span id="l1093"></span><a href="#l1093"></a>
<span id="l1094">  String methods are always much faster and share the same API with</span><a href="#l1094"></a>
<span id="l1095">  unicode strings.  Override this rule if backward compatibility with</span><a href="#l1095"></a>
<span id="l1096">  Pythons older than 2.0 is required.</span><a href="#l1096"></a>
<span id="l1097"></span><a href="#l1097"></a>
<span id="l1098">- Use ``&#39;&#39;.startswith()`` and ``&#39;&#39;.endswith()`` instead of string</span><a href="#l1098"></a>
<span id="l1099">  slicing to check for prefixes or suffixes.</span><a href="#l1099"></a>
<span id="l1100"></span><a href="#l1100"></a>
<span id="l1101">  startswith() and endswith() are cleaner and less error prone.  For</span><a href="#l1101"></a>
<span id="l1102">  example::</span><a href="#l1102"></a>
<span id="l1103"></span><a href="#l1103"></a>
<span id="l1104">      Yes: if foo.startswith(&#39;bar&#39;):</span><a href="#l1104"></a>
<span id="l1105">      No:  if foo[:3] == &#39;bar&#39;:</span><a href="#l1105"></a>
<span id="l1106"></span><a href="#l1106"></a>
<span id="l1107">- Object type comparisons should always use isinstance() instead of</span><a href="#l1107"></a>
<span id="l1108">  comparing types directly. ::</span><a href="#l1108"></a>
<span id="l1109"></span><a href="#l1109"></a>
<span id="l1110">      Yes: if isinstance(obj, int):</span><a href="#l1110"></a>
<span id="l1111"></span><a href="#l1111"></a>
<span id="l1112">      No:  if type(obj) is type(1):</span><a href="#l1112"></a>
<span id="l1113"></span><a href="#l1113"></a>
<span id="l1114">  When checking if an object is a string, keep in mind that it might</span><a href="#l1114"></a>
<span id="l1115">  be a unicode string too!  In Python 2, str and unicode have a</span><a href="#l1115"></a>
<span id="l1116">  common base class, basestring, so you can do::</span><a href="#l1116"></a>
<span id="l1117"></span><a href="#l1117"></a>
<span id="l1118">      if isinstance(obj, basestring):</span><a href="#l1118"></a>
<span id="l1119"></span><a href="#l1119"></a>
<span id="l1120">  Note that in Python 3, ``unicode`` and ``basestring`` no longer exist</span><a href="#l1120"></a>
<span id="l1121">  (there is only ``str``) and a bytes object is no longer a kind of</span><a href="#l1121"></a>
<span id="l1122">  string (it is a sequence of integers instead)</span><a href="#l1122"></a>
<span id="l1123"></span><a href="#l1123"></a>
<span id="l1124">- For sequences, (strings, lists, tuples), use the fact that empty</span><a href="#l1124"></a>
<span id="l1125">  sequences are false. ::</span><a href="#l1125"></a>
<span id="l1126"></span><a href="#l1126"></a>
<span id="l1127">      Yes: if not seq:</span><a href="#l1127"></a>
<span id="l1128">           if seq:</span><a href="#l1128"></a>
<span id="l1129"></span><a href="#l1129"></a>
<span id="l1130">      No: if len(seq)</span><a href="#l1130"></a>
<span id="l1131">          if not len(seq)</span><a href="#l1131"></a>
<span id="l1132"></span><a href="#l1132"></a>
<span id="l1133">- Don&#39;t write string literals that rely on significant trailing</span><a href="#l1133"></a>
<span id="l1134">  whitespace.  Such trailing whitespace is visually indistinguishable</span><a href="#l1134"></a>
<span id="l1135">  and some editors (or more recently, reindent.py) will trim them.</span><a href="#l1135"></a>
<span id="l1136"></span><a href="#l1136"></a>
<span id="l1137">- Don&#39;t compare boolean values to True or False using ``==``. ::</span><a href="#l1137"></a>
<span id="l1138"></span><a href="#l1138"></a>
<span id="l1139">      Yes:   if greeting:</span><a href="#l1139"></a>
<span id="l1140">      No:    if greeting == True:</span><a href="#l1140"></a>
<span id="l1141">      Worse: if greeting is True:</span><a href="#l1141"></a>
<span id="l1142"></span><a href="#l1142"></a>
<span id="l1143">- The Python standard library will not use function annotations as</span><a href="#l1143"></a>
<span id="l1144">  that would result in a premature commitment to a particular</span><a href="#l1144"></a>
<span id="l1145">  annotation style.  Instead, the annotations are left for users to</span><a href="#l1145"></a>
<span id="l1146">  discover and experiment with useful annotation styles.</span><a href="#l1146"></a>
<span id="l1147"></span><a href="#l1147"></a>
<span id="l1148">  It is recommended that third party experiments with annotations use an</span><a href="#l1148"></a>
<span id="l1149">  associated decorator to indicate how the annotation should be</span><a href="#l1149"></a>
<span id="l1150">  interpreted.</span><a href="#l1150"></a>
<span id="l1151"></span><a href="#l1151"></a>
<span id="l1152">  Early core developer attempts to use function annotations revealed</span><a href="#l1152"></a>
<span id="l1153">  inconsistent, ad-hoc annotation styles.  For example:</span><a href="#l1153"></a>
<span id="l1154"></span><a href="#l1154"></a>
<span id="l1155">  * ``[str]`` was ambiguous as to whether it represented a list of</span><a href="#l1155"></a>
<span id="l1156">    strings or a value that could be either *str* or *None*.</span><a href="#l1156"></a>
<span id="l1157"></span><a href="#l1157"></a>
<span id="l1158">  * The notation ``open(file:(str,bytes))`` was used for a value that</span><a href="#l1158"></a>
<span id="l1159">    could be either *bytes* or *str* rather than a 2-tuple containing</span><a href="#l1159"></a>
<span id="l1160">    a *str* value followed by a *bytes* value.</span><a href="#l1160"></a>
<span id="l1161"></span><a href="#l1161"></a>
<span id="l1162">  * The annotation ``seek(whence:int)`` exhibited a mix of</span><a href="#l1162"></a>
<span id="l1163">    over-specification and under-specification: *int* is too</span><a href="#l1163"></a>
<span id="l1164">    restrictive (anything with ``__index__`` would be allowed) and it</span><a href="#l1164"></a>
<span id="l1165">    is not restrictive enough (only the values 0, 1, and 2 are</span><a href="#l1165"></a>
<span id="l1166">    allowed).  Likewise, the annotation ``write(b: bytes)`` was also</span><a href="#l1166"></a>
<span id="l1167">    too restrictive (anything supporting the buffer protocol would be</span><a href="#l1167"></a>
<span id="l1168">    allowed).</span><a href="#l1168"></a>
<span id="l1169"></span><a href="#l1169"></a>
<span id="l1170">  * Annotations such as ``read1(n: int=None)`` were self-contradictory</span><a href="#l1170"></a>
<span id="l1171">    since *None* is not an *int*.  Annotations such as</span><a href="#l1171"></a>
<span id="l1172">    ``source_path(self, fullname:str) -&gt; object`` were confusing about</span><a href="#l1172"></a>
<span id="l1173">    what the return type should be.</span><a href="#l1173"></a>
<span id="l1174"></span><a href="#l1174"></a>
<span id="l1175">  * In addition to the above, annotations were inconsistent in the use</span><a href="#l1175"></a>
<span id="l1176">    of concrete types versus abstract types:  *int* versus *Integral*</span><a href="#l1176"></a>
<span id="l1177">    and set/frozenset versus MutableSet/Set.</span><a href="#l1177"></a>
<span id="l1178"></span><a href="#l1178"></a>
<span id="l1179">  * Some annotations in the abstract base classes were incorrect</span><a href="#l1179"></a>
<span id="l1180">    specifications.  For example, set-to-set operations require</span><a href="#l1180"></a>
<span id="l1181">    *other* to be another instance of *Set* rather than just an</span><a href="#l1181"></a>
<span id="l1182">    *Iterable*.</span><a href="#l1182"></a>
<span id="l1183"></span><a href="#l1183"></a>
<span id="l1184">  * A further issue was that annotations become part of the</span><a href="#l1184"></a>
<span id="l1185">    specification but weren&#39;t being tested.</span><a href="#l1185"></a>
<span id="l1186"></span><a href="#l1186"></a>
<span id="l1187">  * In most cases, the docstrings already included the type</span><a href="#l1187"></a>
<span id="l1188">    specifications and did so with greater clarity than the function</span><a href="#l1188"></a>
<span id="l1189">    annotations.  In the remaining cases, the docstrings were improved</span><a href="#l1189"></a>
<span id="l1190">    once the annotations were removed.</span><a href="#l1190"></a>
<span id="l1191"></span><a href="#l1191"></a>
<span id="l1192">  * The observed function annotations were too ad-hoc and inconsistent</span><a href="#l1192"></a>
<span id="l1193">    to work with a coherent system of automatic type checking or</span><a href="#l1193"></a>
<span id="l1194">    argument validation.  Leaving these annotations in the code would</span><a href="#l1194"></a>
<span id="l1195">    have made it more difficult to make changes later so that</span><a href="#l1195"></a>
<span id="l1196">    automated utilities could be supported.</span><a href="#l1196"></a>
<span id="l1197"></span><a href="#l1197"></a>
<span id="l1198"></span><a href="#l1198"></a>
<span id="l1199">.. rubric:: Footnotes</span><a href="#l1199"></a>
<span id="l1200"></span><a href="#l1200"></a>
<span id="l1201">.. [#fn-hi] *Hanging indentation* is a type-setting style where all</span><a href="#l1201"></a>
<span id="l1202">   the lines in a paragraph are indented except the first line.  In</span><a href="#l1202"></a>
<span id="l1203">   the context of Python, the term is used to describe a style where</span><a href="#l1203"></a>
<span id="l1204">   the opening parenthesis of a parenthesized statement is the last</span><a href="#l1204"></a>
<span id="l1205">   non-whitespace character of the line, with subsequent lines being</span><a href="#l1205"></a>
<span id="l1206">   indented until the closing parenthesis.</span><a href="#l1206"></a>
<span id="l1207"></span><a href="#l1207"></a>
<span id="l1208"></span><a href="#l1208"></a>
<span id="l1209">References</span><a href="#l1209"></a>
<span id="l1210">==========</span><a href="#l1210"></a>
<span id="l1211"></span><a href="#l1211"></a>
<span id="l1212">.. [1] PEP 7, Style Guide for C Code, van Rossum</span><a href="#l1212"></a>
<span id="l1213"></span><a href="#l1213"></a>
<span id="l1214">.. [2] Barry&#39;s GNU Mailman style guide</span><a href="#l1214"></a>
<span id="l1215">       http://barry.warsaw.us/software/STYLEGUIDE.txt</span><a href="#l1215"></a>
<span id="l1216"></span><a href="#l1216"></a>
<span id="l1217">.. [3] http://www.wikipedia.com/wiki/CamelCase</span><a href="#l1217"></a>
<span id="l1218"></span><a href="#l1218"></a>
<span id="l1219">.. [4] PEP 8 modernisation, July 2013</span><a href="#l1219"></a>
<span id="l1220">   http://bugs.python.org/issue18472</span><a href="#l1220"></a>
<span id="l1221"></span><a href="#l1221"></a>
<span id="l1222"></span><a href="#l1222"></a>
<span id="l1223">Copyright</span><a href="#l1223"></a>
<span id="l1224">=========</span><a href="#l1224"></a>
<span id="l1225"></span><a href="#l1225"></a>
<span id="l1226">This document has been placed in the public domain.</span><a href="#l1226"></a>
<span id="l1227"></span><a href="#l1227"></a>
<span id="l1228"></span><a href="#l1228"></a>
<span id="l1229"></span><a href="#l1229"></a>
<span id="l1230"></span><a href="#l1230"></a>
<span id="l1231">..</span><a href="#l1231"></a>
<span id="l1232">   Local Variables:</span><a href="#l1232"></a>
<span id="l1233">   mode: indented-text</span><a href="#l1233"></a>
<span id="l1234">   indent-tabs-mode: nil</span><a href="#l1234"></a>
<span id="l1235">   sentence-end-double-space: t</span><a href="#l1235"></a>
<span id="l1236">   fill-column: 70</span><a href="#l1236"></a>
<span id="l1237">   coding: utf-8</span><a href="#l1237"></a></pre>
<div class="sourcelast"></div>
</div>
</div>
</div>

<script type="text/javascript">process_dates()</script>


</body>
</html>

